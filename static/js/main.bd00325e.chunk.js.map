{"version":3,"sources":["images/code_agtech.flr","images/feedx.svg","images/birdseyecombine.jpg","images/agtech_landscape.jpg","images/animalagtechmap.png","images/animaltypechart.png","images/specieschart.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","images","require","logo","birdsEye","landscape","animal","section","species","theme","createTheme","primary","secondary","tertiary","quaternary","App","transition","bgColor","bgImage","size","fit","lineHeight","textColor","textFont","style","textDecoration","height","src","width","tweetId","caps","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd00325e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/code_agtech.8e8b8c6e.flr\";","module.exports = __webpack_public_path__ + \"static/media/feedx.ec777d36.svg\";","module.exports = __webpack_public_path__ + \"static/media/birdseyecombine.43ed0249.jpg\";","module.exports = __webpack_public_path__ + \"static/media/agtech_landscape.e32c38cc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/animalagtechmap.58bda446.png\";","module.exports = __webpack_public_path__ + \"static/media/animaltypechart.d0eba591.png\";","module.exports = __webpack_public_path__ + \"static/media/specieschart.03741cae.png\";","import React from \"react\";\nimport {\n  TwitterTweetEmbed,\n  TwitterFollowButton,\n  TwitterTimelineEmbed\n} from \"react-twitter-embed\";\nimport {\n  BlockQuote,\n  Cite,\n  Deck,\n  Heading,\n  Image,\n  List,\n  ListItem,\n  Quote,\n  Slide,\n  Text,\n  Fill,\n  Notes,\n  Fit,\n  Layout,\n  Appear\n} from \"spectacle\";\nimport createTheme from \"spectacle/lib/themes/default\";\n\n// import FlareComponent from \"flare-react\";\n\nconst flare = require(\"./images/code_agtech.flr\");\n\nconst images = {\n  logo: require(\"./images/feedx.svg\"),\n  birdsEye: require(\"./images/birdseyecombine.jpg\"),\n  landscape: require(\"./images/agtech_landscape.jpg\"),\n  animal: require(\"./images/animalagtechmap.png\"),\n  section: require(\"./images/animaltypechart.png\"),\n  species: require(\"./images/specieschart.png\")\n};\n\nconst theme = createTheme(\n  {\n    primary: \"white\",\n    secondary: \"#1F2022\",\n    tertiary: \"#03A9FC\",\n    quaternary: \"#cccccc\"\n  },\n  {\n    primary: \"Montserrat\",\n    secondary: \"Helvetica\"\n  }\n);\n\nfunction App() {\n  return (\n    <Deck theme={theme} transition={[\"slide\"]}>\n      <Slide\n        transition={[\"zoom\"]}\n        bgColor=\"quaternary\"\n        bgImage={images.birdsEye}\n      >\n        <Heading\n          size={1}\n          fit\n          lineHeight={1}\n          textColor=\"secondary\"\n          textFont=\"secondary\"\n          style={{ textDecoration: \"underline\" }}\n        >\n          The State of AgTech\n        </Heading>\n        <div style={{ height: \"30px\" }}></div>\n        <Notes>Hi All Immmm Carl .</Notes>\n      </Slide>\n      <Slide bgImage={images.landscape} />\n      <Slide bgImage={images.animal} />\n      <Slide bgImage={images.section} />\n      <Slide bgImage={images.species} />\n      <Slide transition={[\"zoom\"]} bgColor=\"quaternary\">\n        <Appear>\n          <Heading\n            size={1}\n            fit\n            lineHeight={1}\n            textColor=\"secondary\"\n            textFont=\"secondary\"\n          >\n            The Case for AgTech In Wisconsin\n          </Heading>\n        </Appear>\n\n        <div style={{ height: \"30px\" }}></div>\n        {/* <FlareComponent\n          width={700}\n          height={650}\n          animationName=\"coding\"\n          file={flare}\n        /> */}\n        <Notes>Hi All Immmm Carl .</Notes>\n      </Slide>\n      <Slide bgColor=\"secondary\">\n        <Image src={images.logo} width={800} />\n      </Slide>\n      <Slide>\n        <Fill>\n          <TwitterTweetEmbed tweetId={\"1226585357271076870\"} />\n        </Fill>\n      </Slide>\n      <Slide transition={[\"fade\"]} bgColor=\"tertiary\">\n        <Heading size={6} textColor=\"primary\" caps>\n          Typography\n        </Heading>\n        <Heading size={1} textColor=\"secondary\">\n          Heading 1\n        </Heading>\n        <Heading size={2} textColor=\"secondary\">\n          Heading 2\n        </Heading>\n        <Heading size={3} textColor=\"secondary\">\n          Heading 3\n        </Heading>\n        <Heading size={4} textColor=\"secondary\">\n          Heading 4\n        </Heading>\n        <Heading size={5} textColor=\"secondary\">\n          Heading 5\n        </Heading>\n        <Text size={6} textColor=\"secondary\">\n          Standard text\n        </Text>\n      </Slide>\n      <Slide transition={[\"fade\"]} bgColor=\"primary\" textColor=\"tertiary\">\n        <Heading size={6} textColor=\"secondary\" caps>\n          Standard List\n        </Heading>\n        <List>\n          <ListItem>Item 1</ListItem>\n          <ListItem>Item 2</ListItem>\n          <ListItem>Item 3</ListItem>\n          <ListItem>Item 4</ListItem>\n        </List>\n      </Slide>\n      <Slide transition={[\"fade\"]} bgColor=\"secondary\" textColor=\"primary\">\n        <BlockQuote>\n          <Quote>All models are wrong, but some are useful.</Quote>\n          <Cite>George Box</Cite>\n        </BlockQuote>\n      </Slide>\n      <Slide>\n        <Image src={images.logo} width={500} />\n      </Slide>\n      <Slide>\n        {/* <Iframe url=\"https://feedx.io\" width=\"100%\" height=\"100%\" /> */}\n      </Slide>\n    </Deck>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}